{"version":3,"sources":["Components/ObjectDetection.js","App.js","serviceWorker.js","index.js"],"names":["machineStates","initial","states","on","next","loadingModel","modelReady","imageReady","showImage","identifying","complete","showResult","ObjectDetection","useState","model","setModel","imageURL","setImageURL","result","setResult","loading","setLoading","imageRef","useRef","inputRef","useReducer","state","event","appState","dispatch","nextState","loadMobileNet","a","mobilenet","actionButton","action","text","current","click","classify","results","useEffect","style","marginTop","tip","className","src","alt","ref","type","accept","capture","onChange","target","files","length","url","URL","createObjectURL","map","probability","key","toFixed","size","onClick","Header","Layout","Content","Footer","App","height","width","paddingBottom","backgroundColor","backgroundImage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.249b9f4c.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useReducer } from 'react';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport { Button, Spin, Card } from 'antd';\nimport '../styles/ObjectDetection.css'\n\nconst machineStates = {\n    initial: 'initial',\n    states: {\n        initial: { on: { next: \"loadingModel\" } },\n        loadingModel: { on: { next: \"modelReady\" } },\n        modelReady: { on: { next: \"imageReady\" } },\n        imageReady: { on: { next: \"identifying\" }, showImage: true },\n        identifying: { on: { next: \"complete\" } },\n        complete: { on: { next: \"modelReady\" }, showImage: true, showResult: true }\n    }\n};\nfunction ObjectDetection() {\n    const [model, setModel] = useState(null);\n    const [imageURL, setImageURL] = useState(null);\n    const [result, setResult] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const imageRef = useRef();\n    const inputRef = useRef();\n\n    const reducer = (state, event) => machineStates.states[state].on[event] || machineStates.initial;\n\n    const [appState, dispatch] = useReducer(reducer, machineStates.initial);\n\n    const nextState = () => dispatch(\"next\");\n\n    const loadMobileNet = async () => {\n        nextState();\n        const model = await mobilenet.load();\n        setModel(model);\n        setLoading(false)\n        nextState();\n       \n    };\n\n    const identify = async () => {\n        nextState();\n        const results = await model.classify(imageRef.current);\n        setResult(results);\n        nextState();\n    }\n\n    const reset = async () => {\n        setResult([]);\n        nextState();\n    }\n\n    const upload = () => inputRef.current.click();\n\n    const handleUpload = event => {\n        const { files } = event.target;\n        if (files.length > 0) {\n            const url = URL.createObjectURL(event.target.files[0]);\n            setImageURL(url);\n            nextState();\n        }\n    }\n\n    const actionButton = {\n        initial: { action: loadMobileNet, text: \"Load Model\" },\n        loadingModel: { text: \"Loading Model...\" },\n        modelReady: { action: upload, text: \"Upload Image\" },\n        imageReady: { action: identify, text: \"Identify\" },\n        identifying: { text: \"Identifying...\" },\n        complete: { action: reset, text: \"Reset\" }\n    };\n\n    const { showImage, showResult } = machineStates.states[appState];\n    useEffect(() => {\n        loadMobileNet();\n    }, []);\n     if (loading) {\n        return (\n            <center style={{marginTop:\"100px\"}}>\n                <Spin tip=\"Loading MobileNet model...\"></Spin>\n            </center>\n        );\n    } \n    return (\n\n        <div className=\"wrapper\">\n            {showImage && <img src={imageURL} alt=\"upload-preview\" ref={imageRef} />}\n            <input\n                type=\"file\"\n                accept=\"image/*\"\n                capture=\"camera\"\n                onChange={handleUpload}\n                ref={inputRef}\n            />\n            {showResult && (\n                <div className=\"resultCard\">\n                    {result.map(({ className, probability }) => (\n                        <li key={className}>{`${className}: ${(probability * 100).toFixed(2)}%`}</li>\n                    ))}\n                </div>\n            )}\n            <Button type=\"primary\" size=\"large\" onClick={actionButton[appState].action || (() => { })}>\n                {actionButton[appState].text}\n            </Button>\n        </div>\n    )\n}\n\nexport default ObjectDetection;\n","import React from 'react';\nimport { Layout } from 'antd';\nimport ObjectDetection from './Components/ObjectDetection'\nimport './styles/App.css';\n\nconst { Header, Content, Footer } = Layout;\nfunction App() {\n  return (\n    <div>\n    <Layout>\n        <Header style={{\n          height: \"25%\",\n          width: \"100%\",\n          paddingBottom: '10px',\n          backgroundColor: \"#485461\",\n          backgroundImage: \"linear-gradient(315deg, #485461 0%, #28313b 74%)\"\n        }}>\n            <div className=\"headerText\">\n              <h1> üîé Object Detection üîç</h1>\n              <h3> Realtime Data from Tensorflow.js </h3>              \n            </div>\n        </Header>\n        <Content>\n          <ObjectDetection />\n\n        </Content>\n        <Footer>\n          <center>\n            Develop by Ronnakorn Hompoa ¬©2020\n            Implemented by Tensorflow from NPM\n          </center>\n        </Footer>\n      </Layout>      \n    </div>\n \n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}